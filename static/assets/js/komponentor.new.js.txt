/**
 *
 */
(function ($) {
    window.komponentor = {
        components: {},
        path: null
    };

    komponentor.routing = (function(){
        let tmp = window.location.hash;
        let res = {
            path: null,
            paras: {}
        };

        if(!tmp)
            return res;
        tmp = tmp.substr(1);
        let paras = tmp.split("|");
        res.path = paras.shift();
        res.paras = paras;
        return res;
    })();


    window.onhashchange = function (el) {
        console.log(el,this);
        window.location.reload();
    };


    $.fn.komponent = function (opts) {
        let $el = $(this);
        console.log(this,$el);
        let options = this.data();
        Object.assign(options,opts);
        options.$el = $el;
        Komponent(options)
            .then(function (k) {
                $el.data("komponent",k);
            })
            .catch(function (k) {
                $el.html("Failed to load Komponent");
            });
        return $el;
    };

    /**
     * creates a Komponent
     * @param $el
     * @param parent
     * @returns {null|{parent: *, $el: *}}
     * @constructor
     */
    function Komponent(options) {
        let kmp = {
            $el: null,
        };

        delete options["komponent"];

        Object.assign(kmp,options);

        return new Promise(function (resolve,reject) {
            if(options.$el && options.$el.data("komponent")) {
                resolve(options.$el.data("komponent"));
                return;
            }

            komponentor
                .fetchKomponent(kmp)
                .then(function (data) {
                    resolve(kmp);
                })
                .catch(function (msgObj) {
                    reject(msgObj)
                });
        });

        //
        // if(options.$el) {
        //     if(options.$el.data("komponent")) {
        //         return options.$el.data("komponent");
        //     }
        //
        //     if(!options.$el.attr("id") && options.$el.data("url")) {
        //         options.$el.attr("id","k"+options.$el.data("url").hashCode());
        //     }
        // }

        // return kmp;
    }


    String.prototype.hashCode = function()
    {
        var hash = 0, i, chr;
        if (this.length === 0) return hash;
        for (i = 0; i < this.length; i++) {
            chr   = this.charCodeAt(i);
            hash  = ((hash << 5) - hash) + chr;
            hash |= 0; // Convert to 32bit integer
        }
        return Math.abs(hash);
    };

    /**
     *
     * @param data
     * @param options
     * @returns {Promise<unknown>}
     */
    function renderKomponent(data,options)
    {
        return new Promise( (resolve,reject)=>{
            let render = $(data);
            console.log(render);

            let initFunc = typeof init_komponent==="function" ? init_komponent : new Function();
            delete init_komponent;

            let cId = "k"+options.url.hashCode();

            // no default container, create one on document root
            if(!options.$el) {
                if(!options.hasOwnProperty("parent"))
                    reject({reason: "Could not load component: invalid parent",options:options});

                options.$el = $("<div>").appendTo(options.parent.$el).css("display", "none");
            }

            if(!options.$el.attr('id'))
                options.$el.attr("id", cId);


            let loaded_komponent = $(data);
            if(options.$el.data("replace") && loaded_komponent.lenght===1) {
                options.$el.replaceWith(loaded_komponent).attr("is","komponent");
            }
            else {
                options.$el.html(data);
            }

            let k = Komponent(options.$el,options.parent);

            if(!k.hasOwnProperty("loadrecursive")  || k.loadrecursive===false ) {
                let init_result = initFunc(k,data,options);
                resolve(k,init_result);
            }

        })
    }

    /**
     *
     * @returns {Promise<unknown>}
     * @param opts
     */
    komponentor.fetchKomponent = function(options)
    {
        return new Promise((resolve,reject)=>{

            // Object.assign(options,opts);
            // console.log("+++++++++++++",options);


            // Komponent already loaded so just return it
            // if(options.$el && options.$el.data("komponent")) {
            //     resolve(options.$el.data("komponent"));
            //     return;
            // }

            // let k_id;
            // if(options.$el) {
            //     Object.assign(options,options.$el.data());
            //     k_id = options.$el.attr("id");
            // }

            if(!options.url) {
                reject({reason: "No Komponent URL provided",opts:opts,this:this});
            }

            // k_id = k_id ? k_id : "k"+options.url.hashCode();

            // options.parent = Komponent(options.parent);

            // if(options.parent && options.parent.komponents.hasOwnProperty(k_id)) {
            //     resolve(options.parent.komponents[k_id]);
            //     return;
            // }

            // prepend kPath
            let url = (typeof _kPath !=="undefined"?_kPath:"") + options.url;
            let fileName = options.url.split("/").pop();
            if(fileName.length && fileName.indexOf(".")===-1 && typeof _kExt !== "undefined") {
                url += _kExt;
            }
            // console.log(url);

            if(options.url.indexOf("?")===-1)
                url += "?v=1";

            // load component
            $.get(url)
                .done(function (responseData) {
                    renderKomponent(responseData,options)
                        .then((comp)=>resolve(comp))
                        .catch((cause)=>{
                            reject(cause)
                        });
                })
                .fail(function (xhr) {
                    reject({reason: "fail to initiate component because failed ajax request",xhr: xhr,request: options});
                });
        });
    };

    /**
     *
     * @param parent
     * @returns {Promise<unknown>}
     */
    function loadKomponents(parent)
    {
        let parentKomponent = $(parent).data("komponent");

        if(!parentKomponent) {
            parentKomponent = Komponent($(parent));
        }

        return new Promise(
            function(resolve,reject)
            {
                let deep=0,counter=0;
                $(parent).find("[is=komponent]").each(function () {
                    counter++;
                    komponentor.fetchKomponent({$el:$(this),parent:$(parent)})
                        .then((komponent,init_result) => {
                            console.log("//////////////////",komponent);
                            parentKomponent.komponents[komponent.$el.attr("id")] = komponent;
                        })
                        .catch((cause)=>{
                            reject(cause)
                        })
                        .finally((a) => {
                            counter--;
                        });
                });

                // function wait(to) {
                //     deep++;
                //     if(deep>10) {
                //         resolve();
                //         return;
                //     }
                //     setTimeout(()=> {
                //         if(counter>0)
                //             wait(to);
                //         else
                //             resolve();
                //     },to);
                // }

            });
    }


    /**
     * default behaviour is to autoload komponents
     */
    $(document).ready(function () {
        if(typeof autoload!== "undefined" && !autoload) {
            return;
        }
        loadKomponents("body");

        // $("body")
        //     .find("[is=komponent]")
        //     .each(function () {
        //         komponentor.getKomponent({$el:$(this),parent:$(parent)})
        //             .then((komponent) => {
        //                 parentKomponent.komponents[komponent.$el.attr("id")] = komponent;
        //             })
        //             .catch((cause)=>{
        //                 // reject(cause)
        //             })
        //             .finally((a) => {
        //
        //             });
        //     });
    });


    /**
     *
     * @param url
     * @param options
     * @returns {{data: data, options: (function(*): obj), send: (function(): Promise<unknown>), url: (function(*): obj)}}
     */
    komponentor.intent = function (url,options) {
        let init_data = {data:{}};
        let _data = {};

        let obj = {
            url: function(url) {
                init_data.url = url;
                return this;
            },
            options: function(options) {
                Object.assign(init_data,options);
                return this;
            },
            data: function (attr,val) {
                if(typeof attr==="object") {
                    _data = attr;
                    return this;
                }
                _data[attr] = val;
                return this;
            },
            send: function () {
                // add overlay
                let $overlay = $("<div class='pageOverlay'><div class='spinner'></div></div>").appendTo("body");

                return  new Promise(function (resolve,reject) {
                    komponentor
                        .fetchKomponent(init_data)
                        .then(  function (komponent) {
                            if(komponent.hasOwnProperty("exec")) {
                                komponent.exec(init_data.data);
                            }
                            resolve(komponent);
                        })
                        .catch(function (v) {
                            reject(v);
                        })
                        .finally(()=>{
                            $overlay.remove();
                        });
                });
            }
        };

        if(url) {
            obj.url(url);
        }
        if(options && typeof options==="object") {
            obj.options(options);
        }

        return  obj;
    };


    komponentor.sendIntent = function(options)
    {
        let $overlay = $("<div class='pageOverlay'><div class='spinner'></div></div>").appendTo("body");

        komponentor.fetchKomponent(options)
            .then(  function (c) {
                if(!c)
                    return;
                if(c.hasOwnProperty("exec"))
                    c.exec(options.data);
            })
            .catch(function (v) {
                console.log("could not load",v,options);
            })
            .finally(()=>{
                $overlay.remove();
            });

    };

    komponentor.loadKomponents = function(container) {
        loadKomponents(container);
    }


})($);
